{
	"nodes":[
		{"id":"1d33e9748dd0b621","type":"text","text":"## Основные cтруктуры данных","x":128,"y":-275,"width":243,"height":30},
		{"id":"47555ae20aeef3ce","type":"text","text":"| Структура      | Вставка | Удаление | Доступ по индексу | Память |\n|----------------|---------|----------|-------------------|--------|\n| **Массив**     | O(1)    | O(n)     | O(1)              | Минимум |\n| **Связный список** | O(1) | O(1)     | O(n)              | Дополнительно на ссылки |\n| **Стек**       | O(1)    | O(1)     | -                 | Минимум |\n| **Очередь**    | O(1)    | O(1)     | -                 | Минимум |\n| **Хеш-таблица**| O(1)    | O(1)     | -                 | Зависит от хеширования |","x":-50,"y":1000,"width":531,"height":149},
		{"id":"11def1cc4a4fbc23","type":"text","text":"### Stack","x":131,"y":-80,"width":60,"height":30},
		{"id":"cdf36ef4b6277593","type":"text","text":"### Queue(очередь)","x":216,"y":-80,"width":130,"height":30},
		{"id":"6f09d20b3dd5bb24","type":"text","text":"### Hash Table (Хеш-таблица)","x":376,"y":-80,"width":192,"height":30},
		{"id":"fd086d52809021b8","type":"text","text":"### Array","x":-78,"y":-80,"width":74,"height":30},
		{"id":"2d494abab8733ae9","type":"text","text":"### LinkedList","x":16,"y":-80,"width":88,"height":30},
		{"id":"76ee9271b8d50b97","type":"text","text":"Стек — это структура данных типа **LIFO** (Last In, First Out): последний добавленный элемент удаляется первым.  \n\n**Основные операции:**  \n- **push(x)**: Добавить элемент.  \n- **pop()**: Удалить последний элемент.  \n- **peek()**: Посмотреть последний элемент.  \n\n**Плюсы:**  \n- Простота реализации.  \n- Используется для выполнения операций отмены, обхода деревьев, обработки выражений.  \n\n**Минусы:**  \n- Линейная ограниченность доступа (доступ только к верхушке).  \n\n**Пример (на Python):**  \n```python\nstack = []\nstack.append(10)  # push\nstack.append(20)\nprint(stack.pop())  # pop, Вывод: 20\n```","x":71,"y":160,"width":232,"height":492},
		{"id":"dfe240ddd96ecfa4","type":"text","text":"Очередь — это структура данных типа **FIFO** (First In, First Out): первый добавленный элемент удаляется первым.  \n\n**Основные операции:**  \n- **enqueue(x)**: Добавить элемент.  \n- **dequeue()**: Удалить первый элемент.  \n\n**Типы очередей:**  \n- **Обычная очередь.**  \n- **Дек (Deque)**: Двусторонняя очередь (вставка и удаление с обоих концов).  \n- **Очередь с приоритетами.**  \n\n**Плюсы:**  \n- Подходит для задач планирования.  \n\n**Минусы:**  \n- Линейный доступ к элементам.  \n\n**Пример (на Python):**  \n```python\nfrom collections import deque\n\nqueue = deque()\nqueue.append(10)  # enqueue\nqueue.append(20)\nprint(queue.popleft())  # dequeue, Вывод: 10\n```","x":371,"y":160,"width":251,"height":543},
		{"id":"2d14a99a37296a9c","type":"text","text":"Хеш-таблица — это структура данных, которая хранит пары \"ключ-значение\". Для быстрого доступа используется хеш-функция.  \n\n**Плюсы:**  \n- Быстрая вставка, удаление и поиск (**O(1)**) в среднем.  \n- Гибкость для ассоциативных массивов.  \n\n**Минусы:**  \n- Возможны коллизии (разрешаются методами цепочек или открытой адресации).  \n- Хеш-функция требует вычислительных затрат.  \n\n**Пример (на Python):**  \n```python\nhash_table = {}\nhash_table[\"key1\"] = \"value1\"\nprint(hash_table[\"key1\"])  # Вывод: value1\n```","x":711,"y":160,"width":270,"height":439},
		{"id":"5a2d7efdd4e788f7","type":"text","text":"Массив — это структура данных, которая хранит элементы одного типа в непрерывной области памяти. Каждый элемент доступен по индексу.  \n\n**Плюсы:**  \n- Быстрый доступ по индексу (**O(1)**).  \n- Простота реализации.  \n\n**Минусы:**  \n- Статический размер (в большинстве языков).  \n- Удаление/вставка элемента требует сдвига элементов (**O(n)**).  \n\n**Пример (на Python):**  \n```python\narr = [10, 20, 30]\nprint(arr[1])  # Вывод: 20\n```","x":-609,"y":160,"width":260,"height":382},
		{"id":"8ac9d279e6645359","type":"text","text":"Связный список — это структура данных, где элементы (узлы) хранят данные и ссылку на следующий элемент.  \n\n**Типы:**  \n- **Односвязный список**: Каждый узел указывает на следующий.  \n- **Двусвязный список**: Каждый узел указывает на предыдущий и следующий.  \n\n**Плюсы:**  \n- Динамический размер.  \n- Быстрая вставка/удаление элементов, если есть указатель на нужное место (**O(1)**).  \n\n**Минусы:**  \n- Медленный доступ к элементам (**O(n)**).  \n- Дополнительная память для хранения ссылок.  \n\n**Пример (на Python):**  \n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n```","x":-269,"y":160,"width":265,"height":555},
		{"id":"51903d0e95b16f41","type":"text","text":"# Структуры данных","x":735,"y":-546,"width":185,"height":30},
		{"id":"3837b7852cb79295","type":"text","text":"## Сложные структуры данных","x":2586,"y":-260,"width":244,"height":30},
		{"id":"e77a54316c9d8e2f","type":"text","text":"### Деревья","x":2280,"y":-45,"width":90,"height":30},
		{"id":"3269dfc493aa90a4","type":"text","text":"### Графы","x":2400,"y":-45,"width":67,"height":30},
		{"id":"7a59e254e0ca7dfe","type":"text","text":"### Кучи(Heaps)","x":2500,"y":-45,"width":105,"height":30},
		{"id":"93476320a0cab843","type":"text","text":"### Множества(Sets)","x":2640,"y":-45,"width":137,"height":30},
		{"id":"a0212fb5232b0df4","type":"text","text":"### Деки (Deques, Double-Ended Queues)","x":2800,"y":-45,"width":264,"height":30},
		{"id":"0d298cecb5cfddc5","type":"text","text":"### Динамические массивы","x":3100,"y":-45,"width":181,"height":30},
		{"id":"550b1b0b9246118e","type":"text","text":"\n# Алгоритмы","x":4160,"y":-516,"width":120,"height":30},
		{"id":"1a25d12576fb48cf","type":"text","text":"## По способу решения задач","x":4431,"y":-640,"width":229,"height":30},
		{"id":"bc8678d09ee0feaf","type":"text","text":"### Графовые алгоритмы","x":4806,"y":-351,"width":164,"height":30},
		{"id":"14e7dcc946ce1f3a","type":"text","text":"### Криптографические алгоритмы","x":4803,"y":-186,"width":229,"height":30},
		{"id":"6e964c63b09bb579","type":"text","text":"### Алгоритмы работы со строками","x":4800,"y":-266,"width":232,"height":30},
		{"id":"506c975d0e22918c","type":"text","text":"## По назначению","x":4431,"y":-407,"width":132,"height":30},
		{"id":"9a6345bede6a895f","type":"text","text":"### Алгоритмы сортировки","x":4806,"y":-437,"width":177,"height":30},
		{"id":"0250085d305692eb","type":"text","text":"### Алгоритмы поиска","x":4806,"y":-501,"width":149,"height":30},
		{"id":"9b7c1feeb56d09e7","type":"text","text":"#### Линейный поиск: \nПростой, проверяет все элементы (O(n)).","x":5571,"y":-401,"width":139,"height":100},
		{"id":"6c561c23ad8c5a5c","type":"text","text":"#### Быстрая сортировка (QuickSort): \nДелит массив на части вокруг опорного элемента (O(n log n)).","x":5521,"y":-1126,"width":240,"height":108},
		{"id":"263c9739dfb6bb20","type":"text","text":"#### Пузырьковая сортировка (Bubble Sort): \nПростая, но медленная (O(n²)).","x":5521,"y":-1280,"width":183,"height":107},
		{"id":"c788ab5a60e7828d","type":"text","text":"#### Сортировка слиянием (MergeSort): \nИспользует подход \"разделяй и властвуй\" (O(n log n)).","x":5535,"y":-969,"width":212,"height":122},
		{"id":"68afe41a526df0b1","type":"text","text":"#### Бинарный поиск: \nРаботает на отсортированных данных (O(log n)).\n","x":5571,"y":-284,"width":130,"height":98},
		{"id":"cff10c8f5dd39ce1","type":"text","text":"```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3, 6, 8, 10, 1, 2, 1]))\n\n```","x":6040,"y":-1237,"width":380,"height":252}
	],
	"edges":[
		{"id":"5152b60ed7ba4eab","fromNode":"fd086d52809021b8","fromSide":"bottom","toNode":"5a2d7efdd4e788f7","toSide":"top"},
		{"id":"23c6de1e6150d6d5","fromNode":"2d494abab8733ae9","fromSide":"bottom","toNode":"8ac9d279e6645359","toSide":"top"},
		{"id":"a913aa41ba1510d1","fromNode":"11def1cc4a4fbc23","fromSide":"bottom","toNode":"76ee9271b8d50b97","toSide":"top"},
		{"id":"00326b5c123487b5","fromNode":"cdf36ef4b6277593","fromSide":"bottom","toNode":"dfe240ddd96ecfa4","toSide":"top"},
		{"id":"5692a95585d5c718","fromNode":"6f09d20b3dd5bb24","fromSide":"bottom","toNode":"2d14a99a37296a9c","toSide":"top"},
		{"id":"5d2c2dfed0c2a9b7","fromNode":"1d33e9748dd0b621","fromSide":"bottom","toNode":"fd086d52809021b8","toSide":"top"},
		{"id":"a61ea092ec430492","fromNode":"1d33e9748dd0b621","fromSide":"bottom","toNode":"2d494abab8733ae9","toSide":"top"},
		{"id":"4edde31385752cfc","fromNode":"1d33e9748dd0b621","fromSide":"bottom","toNode":"cdf36ef4b6277593","toSide":"top"},
		{"id":"b285e945c5de327a","fromNode":"1d33e9748dd0b621","fromSide":"bottom","toNode":"6f09d20b3dd5bb24","toSide":"top"},
		{"id":"a3f01a0df53cceb9","fromNode":"5a2d7efdd4e788f7","fromSide":"bottom","toNode":"47555ae20aeef3ce","toSide":"top"},
		{"id":"d71041a95b60529c","fromNode":"8ac9d279e6645359","fromSide":"bottom","toNode":"47555ae20aeef3ce","toSide":"top"},
		{"id":"b198a66d9fbd478f","fromNode":"76ee9271b8d50b97","fromSide":"bottom","toNode":"47555ae20aeef3ce","toSide":"top"},
		{"id":"2b2582cacbb0e565","fromNode":"dfe240ddd96ecfa4","fromSide":"bottom","toNode":"47555ae20aeef3ce","toSide":"top"},
		{"id":"8ebc0cba55dbfac6","fromNode":"2d14a99a37296a9c","fromSide":"bottom","toNode":"47555ae20aeef3ce","toSide":"top"},
		{"id":"8b545142bc680b1d","fromNode":"51903d0e95b16f41","fromSide":"bottom","toNode":"1d33e9748dd0b621","toSide":"top"},
		{"id":"e1fabf742dd0bf2c","fromNode":"51903d0e95b16f41","fromSide":"bottom","toNode":"3837b7852cb79295","toSide":"top"},
		{"id":"566ca256c357dde9","fromNode":"3837b7852cb79295","fromSide":"bottom","toNode":"e77a54316c9d8e2f","toSide":"top"},
		{"id":"06272b85cda3f61e","fromNode":"3837b7852cb79295","fromSide":"bottom","toNode":"3269dfc493aa90a4","toSide":"top"},
		{"id":"f0f7393563637160","fromNode":"3837b7852cb79295","fromSide":"bottom","toNode":"7a59e254e0ca7dfe","toSide":"top"},
		{"id":"3003fedd5cba2b2a","fromNode":"3837b7852cb79295","fromSide":"bottom","toNode":"93476320a0cab843","toSide":"top"},
		{"id":"565412946607008c","fromNode":"3837b7852cb79295","fromSide":"bottom","toNode":"a0212fb5232b0df4","toSide":"top"},
		{"id":"5bab8f41465b45e0","fromNode":"3837b7852cb79295","fromSide":"bottom","toNode":"0d298cecb5cfddc5","toSide":"top"},
		{"id":"fd1c77d820e8f78b","fromNode":"506c975d0e22918c","fromSide":"right","toNode":"9a6345bede6a895f","toSide":"left"},
		{"id":"0a6e43f03e4a1769","fromNode":"506c975d0e22918c","fromSide":"right","toNode":"0250085d305692eb","toSide":"left"},
		{"id":"ff2f343f0c8ea934","fromNode":"506c975d0e22918c","fromSide":"right","toNode":"bc8678d09ee0feaf","toSide":"left"},
		{"id":"56692faf193ec359","fromNode":"506c975d0e22918c","fromSide":"right","toNode":"6e964c63b09bb579","toSide":"left"},
		{"id":"370b6f1ac2a07cab","fromNode":"506c975d0e22918c","fromSide":"right","toNode":"14e7dcc946ce1f3a","toSide":"left"},
		{"id":"52119ce44fa12221","fromNode":"550b1b0b9246118e","fromSide":"right","toNode":"506c975d0e22918c","toSide":"left"},
		{"id":"2cee9660fae4d700","fromNode":"550b1b0b9246118e","fromSide":"right","toNode":"1a25d12576fb48cf","toSide":"left"},
		{"id":"fec75bcd3aa72874","fromNode":"0250085d305692eb","fromSide":"right","toNode":"263c9739dfb6bb20","toSide":"left"},
		{"id":"bf9fed99941d44bf","fromNode":"0250085d305692eb","fromSide":"right","toNode":"c788ab5a60e7828d","toSide":"left"},
		{"id":"15b0aa6dbcccb2d4","fromNode":"0250085d305692eb","fromSide":"right","toNode":"6c561c23ad8c5a5c","toSide":"left"},
		{"id":"5dfd5ecd96478d47","fromNode":"6c561c23ad8c5a5c","fromSide":"right","toNode":"cff10c8f5dd39ce1","toSide":"left"}
	]
}